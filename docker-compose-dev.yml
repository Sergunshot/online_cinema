services:
  db:
    image: 'postgres:latest'
    container_name: postgres_cinema
    env_file:
      - .env
    environment:
      - ENVIRONMENT=docker
    ports:
      - "5432:5432"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_cinema_data:/var/lib/postgresql/data/
    networks:
      - cinema_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB -h 127.0.0.1 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin_cinema
    ports:
      - "3333:80"
    env_file:
      - .env
    environment:
      - ENVIRONMENT=docker
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - pgadmin_cinema_data:/var/lib/pgadmin
    networks:
      - cinema_network

  web:
    build: .
    container_name: backend_cinema
    command: [ "/bin/bash", "/commands/run_web_server_dev.sh" ]
    working_dir: /usr/src/fastapi
    env_file:
      - .env
    environment:
      - LOG_LEVEL=debug
      - PYTHONPATH=/usr/src/fastapi:/usr/src/fastapi/src
      - WATCHFILES_FORCE_POLLING=true
      - ENVIRONMENT=docker
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./:/usr/src/fastapi
    networks:
      - cinema_network

  migrator:
    build: .
    container_name: alembic_migrator_cinema
    command: [ "/bin/bash", "-lc", "/commands/run_migration.sh" ]
    working_dir: /usr/src/fastapi
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./:/usr/src/fastapi
    env_file:
      - .env
    environment:
      - PYTHONPATH=/usr/src/fastapi:/usr/src/fastapi/src
      - ENVIRONMENT=docker
      - ALEMBIC_CONFIG=/usr/src/fastapi/alembic.ini
    networks:
      - cinema_network

  mailhog:
    build:
      context: .
      dockerfile: ./docker/mailhog/Dockerfile
    container_name: mailhog_cinema
    entrypoint: [ "/bin/sh", "-lc" ]
    command: >
      mailhog -smtp-bind-addr 0.0.0.0:1025 -ui-bind-addr 0.0.0.0:8025
    ports:
      - "8025:8025"
      - "1025:1025"
    env_file:
      - .env
    environment:
      MAILHOG_USER: ${MAILHOG_USER:-admin}
      MAILHOG_PASSWORD: ${MAILHOG_PASSWORD:-secret}
    networks:
      - cinema_network

  redis:
    image: redis:7
    container_name: redis_cinema
    command: [ "redis-server", "--save", "" ]
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s
    networks:
      - cinema_network

  celery_worker:
    build: .
    container_name: celery_worker_cinema
    working_dir: /usr/src/fastapi
    command: [ "/bin/bash", "-lc", "celery -A src.celery_app:celery_app worker --loglevel=INFO" ]
    env_file:
      - .env
    environment:
      - PYTHONPATH=/usr/src/fastapi:/usr/src/fastapi/src
      - ENVIRONMENT=docker
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./:/usr/src/fastapi   # <-- МОНТИРУЕМ КОРЕНЬ, а не ./src
    networks:
      - cinema_network

  celery_beat:
    build: .
    container_name: celery_beat_cinema
    working_dir: /usr/src/fastapi
    command: [ "/bin/bash", "-lc", "celery -A src.celery_app:celery_app beat --loglevel=INFO" ]
    env_file:
      - .env
    environment:
      - PYTHONPATH=/usr/src/fastapi:/usr/src/fastapi/src
      - ENVIRONMENT=docker
    depends_on:
      redis:
        condition: service_healthy
      celery_worker:
        condition: service_started
    volumes:
      - ./:/usr/src/fastapi   # <-- тоже корень
    networks:
      - cinema_network

  minio:
    image: minio/minio:latest
    container_name: minio-cinema
    command: server --console-address ":9001" /data
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file:
      - .env
    environment:
      - ENVIRONMENT=docker
    volumes:
      - minio_data:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cinema_network

  minio_mc:
    build:
      context: .
      dockerfile: docker/minio_mc/Dockerfile
    container_name: minio_mc_cinema
    command: [ "/bin/sh", "-c", "/commands/setup_minio.sh" ]
    depends_on:
      minio:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - ENVIRONMENT=docker
    networks:
      - cinema_network

volumes:
  postgres_cinema_data:
    driver: local
  pgadmin_cinema_data:
    driver: local
  minio_data:
    driver: local

networks:
  cinema_network:
    driver: bridge
